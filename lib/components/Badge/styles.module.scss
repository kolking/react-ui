@use 'sass:map';
@use 'sass:list';
@use 'sass:string';
@use '../../styles/utils' as *;
@use '../../styles/theme-default' as theme;

// ---------------------------
// BASE STYLE
// ---------------------------

.badge {
  --size: var(--size-md);
  --size-xs: var(--font-size-xs);
  --size-sm: var(--font-size-sm);
  --size-md: var(--font-size-md);
  --size-lg: var(--font-size-lg);
  --size-xl: var(--font-size-xl);

  --offset: -0.25em;
  --font-size: 0.6em;

  flex-shrink: 0;
  min-width: 1em;
  min-height: 1em;
  padding: 0 0.3em;
  text-align: center;
  align-items: center;
  border-radius: 0.5em;
  display: inline-flex;
  justify-content: center;
  color: var(--text-color);
  will-change: opacity, transform;
  background: var(--background-color);
  font-size: calc(var(--size) + 0.25em);
  font-weight: var(--font-weight-medium);

  &:empty {
    padding: 0;
    min-width: 0.5em;
    min-height: 0.5em;
  }

  @starting-style {
    &.appear {
      opacity: 0;
      transform: scale3d(0,0,1);
    }
  }

  @media (prefers-reduced-motion: no-preference) {
    transition: opacity 0.2s, transform 0.2s var(--ease-out-bounce);
  }

  @each $value in 'top-left', 'top-right', 'bottom-left', 'bottom-right' {
    $list: string.split($value, '-');
  
    &[data-placement=#{$value}] {
      #{list.nth($list, 1)}: var(--offset);
      #{list.nth($list, 2)}: var(--offset);
      position: absolute;
    }
  }  

  :has(> &[data-placement]) {
    position: relative;
  }

  > span {
    font-size: var(--font-size);
    line-height: round(1em, 1px);
  }
}

// ---------------------------
// COLOR SCHEMES
// ---------------------------

$colors: string-keys(map.get(theme.$light-palette, 'colors'));

@each $color in $colors {
  .#{$color} {
    --text-color: var(--color-white);
    --background-color: var(--color-#{$color}-500);
  }
}
